// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  password  String
  createdAt DateTime   @default(now())
  username  String    @unique // Nombre de usuario
  updatedAt DateTime  @updatedAt
  links     Link[] // Relación con los enlaces creados por el usuario
  apiTokens ApiToken[] // Relación con los tokens API del usuario
}

model Link {
  id              String      @id @default(cuid())
  url             String
  shortUrl        String      @unique
  alias           String?     @unique // Alias personalizado opcional
  qrCode          String? // Ruta o Base64 del código QR generado
  qrCodeGenerated Boolean     @default(false) // Indica si se generó un QR
  visits          Int         @default(0) // Contador de visitas
  password        String? // Contraseña opcional para proteger el enlace
  expirationDate  DateTime? // Fecha de expiración opcional
  createdAt       DateTime    @default(now())
  userId          String // Relación con el usuario
  user            User       @relation(fields: [userId], references: [id])
  statistics      Statistic[] // Relación con las estadísticas de acceso
}

model Statistic {
  id         String   @id @default(cuid())
  linkId     String
  link       Link     @relation(fields: [linkId], references: [id])
  ipAddress  String? // IP del visitante
  userAgent  String? // Agente del navegador del visitante
  country    String? // País del visitante
  accessedAt DateTime @default(now()) // Fecha y hora del acceso
}

model ApiToken {
  id        String    @id @default(cuid())
  token     String    @unique // Token único para autenticación API
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  expiresAt DateTime? // Fecha de expiración opcional del token
}
